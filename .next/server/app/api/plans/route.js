/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/plans/route";
exports.ids = ["app/api/plans/route"];
exports.modules = {

/***/ "(rsc)/./app/api/plans/route.ts":
/*!********************************!*\
  !*** ./app/api/plans/route.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nasync function GET() {\n    try {\n        /* ---------- plans ---------- */ const plans = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(`\n      SELECT\n        id               AS \"ID\",\n        plan_name        AS \"PLAN_NAME\",\n        plan_description AS \"PLAN_DESCRIPTION\",\n        price_monthly    AS \"PRICE_MONTHLY\",\n        price_yearly     AS \"PRICE_YEARLY\",\n        is_active        AS \"IS_ACTIVE\",\n        is_free          AS \"IS_FREE\"\n      FROM nl2sql_plans\n      WHERE is_active = 'Y'\n      ORDER BY CASE\n        WHEN UPPER(plan_name) = 'FREE'         THEN 1\n        WHEN UPPER(plan_name) = 'BASIC'        THEN 2\n        WHEN UPPER(plan_name) = 'PROFESSIONAL' THEN 3\n        WHEN UPPER(plan_name) = 'ENTERPRISE'   THEN 4\n        ELSE 5\n      END\n      `, []);\n        /* ---------- features ---------- */ const features = await (0,_lib_db__WEBPACK_IMPORTED_MODULE_0__.query)(`\n      SELECT\n        id          AS \"ID\",\n        feature_key AS \"FEATURE_KEY\",\n        value_num   AS \"VALUE_NUM\",\n        value_text  AS \"VALUE_TEXT\",\n        value_flag  AS \"VALUE_FLAG\",\n        is_active   AS \"IS_ACTIVE\",\n        plan_id     AS \"PLAN_ID\"\n      FROM nl2sql_plans_features\n      WHERE is_active = 'Y'\n      `, []);\n        /* ---------- group & attach ---------- */ const byPlan = {};\n        features.forEach((f)=>{\n            if (!byPlan[f.PLAN_ID]) byPlan[f.PLAN_ID] = [];\n            byPlan[f.PLAN_ID].push(f);\n        });\n        const result = plans.map((p)=>({\n                ...p,\n                features: byPlan[p.ID] ?? []\n            }));\n        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.json(result);\n    } catch (err) {\n        console.error('Error fetching pricing plans:', err);\n        return next_server__WEBPACK_IMPORTED_MODULE_1__.NextResponse.json({\n            error: 'Failed to fetch pricing plans'\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3BsYW5zL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUNVO0FBRXBDLGVBQWVFO0lBQ3BCLElBQUk7UUFDRiwrQkFBK0IsR0FDL0IsTUFBTUMsUUFBUSxNQUFNSCw4Q0FBS0EsQ0FDdkIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O01Ba0JELENBQUMsRUFDRCxFQUFFO1FBR0osa0NBQWtDLEdBQ2xDLE1BQU1JLFdBQVcsTUFBTUosOENBQUtBLENBQzFCLENBQUM7Ozs7Ozs7Ozs7O01BV0QsQ0FBQyxFQUNELEVBQUU7UUFHSix3Q0FBd0MsR0FDeEMsTUFBTUssU0FBZ0MsQ0FBQztRQUN2Q0QsU0FBU0UsT0FBTyxDQUFDQyxDQUFBQTtZQUNmLElBQUksQ0FBQ0YsTUFBTSxDQUFDRSxFQUFFQyxPQUFPLENBQUMsRUFBRUgsTUFBTSxDQUFDRSxFQUFFQyxPQUFPLENBQUMsR0FBRyxFQUFFO1lBQzlDSCxNQUFNLENBQUNFLEVBQUVDLE9BQU8sQ0FBQyxDQUFDQyxJQUFJLENBQUNGO1FBQ3pCO1FBRUEsTUFBTUcsU0FBU1AsTUFBTVEsR0FBRyxDQUFDQyxDQUFBQSxJQUFNO2dCQUM3QixHQUFHQSxDQUFDO2dCQUNKUixVQUFVQyxNQUFNLENBQUNPLEVBQUVDLEVBQUUsQ0FBQyxJQUFJLEVBQUU7WUFDOUI7UUFFQSxPQUFPWixxREFBWUEsQ0FBQ2EsSUFBSSxDQUFDSjtJQUMzQixFQUFFLE9BQU9LLEtBQUs7UUFDWkMsUUFBUUMsS0FBSyxDQUFDLGlDQUFpQ0Y7UUFDL0MsT0FBT2QscURBQVlBLENBQUNhLElBQUksQ0FDdEI7WUFBRUcsT0FBTztRQUFnQyxHQUN6QztZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvcHJvamVjdC9hcHAvYXBpL3BsYW5zL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHF1ZXJ5IH0gZnJvbSAnQC9saWIvZGInO1xuaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICB0cnkge1xuICAgIC8qIC0tLS0tLS0tLS0gcGxhbnMgLS0tLS0tLS0tLSAqL1xuICAgIGNvbnN0IHBsYW5zID0gYXdhaXQgcXVlcnkoXG4gICAgICBgXG4gICAgICBTRUxFQ1RcbiAgICAgICAgaWQgICAgICAgICAgICAgICBBUyBcIklEXCIsXG4gICAgICAgIHBsYW5fbmFtZSAgICAgICAgQVMgXCJQTEFOX05BTUVcIixcbiAgICAgICAgcGxhbl9kZXNjcmlwdGlvbiBBUyBcIlBMQU5fREVTQ1JJUFRJT05cIixcbiAgICAgICAgcHJpY2VfbW9udGhseSAgICBBUyBcIlBSSUNFX01PTlRITFlcIixcbiAgICAgICAgcHJpY2VfeWVhcmx5ICAgICBBUyBcIlBSSUNFX1lFQVJMWVwiLFxuICAgICAgICBpc19hY3RpdmUgICAgICAgIEFTIFwiSVNfQUNUSVZFXCIsXG4gICAgICAgIGlzX2ZyZWUgICAgICAgICAgQVMgXCJJU19GUkVFXCJcbiAgICAgIEZST00gbmwyc3FsX3BsYW5zXG4gICAgICBXSEVSRSBpc19hY3RpdmUgPSAnWSdcbiAgICAgIE9SREVSIEJZIENBU0VcbiAgICAgICAgV0hFTiBVUFBFUihwbGFuX25hbWUpID0gJ0ZSRUUnICAgICAgICAgVEhFTiAxXG4gICAgICAgIFdIRU4gVVBQRVIocGxhbl9uYW1lKSA9ICdCQVNJQycgICAgICAgIFRIRU4gMlxuICAgICAgICBXSEVOIFVQUEVSKHBsYW5fbmFtZSkgPSAnUFJPRkVTU0lPTkFMJyBUSEVOIDNcbiAgICAgICAgV0hFTiBVUFBFUihwbGFuX25hbWUpID0gJ0VOVEVSUFJJU0UnICAgVEhFTiA0XG4gICAgICAgIEVMU0UgNVxuICAgICAgRU5EXG4gICAgICBgLFxuICAgICAgW10sXG4gICAgKTtcblxuICAgIC8qIC0tLS0tLS0tLS0gZmVhdHVyZXMgLS0tLS0tLS0tLSAqL1xuICAgIGNvbnN0IGZlYXR1cmVzID0gYXdhaXQgcXVlcnkoXG4gICAgICBgXG4gICAgICBTRUxFQ1RcbiAgICAgICAgaWQgICAgICAgICAgQVMgXCJJRFwiLFxuICAgICAgICBmZWF0dXJlX2tleSBBUyBcIkZFQVRVUkVfS0VZXCIsXG4gICAgICAgIHZhbHVlX251bSAgIEFTIFwiVkFMVUVfTlVNXCIsXG4gICAgICAgIHZhbHVlX3RleHQgIEFTIFwiVkFMVUVfVEVYVFwiLFxuICAgICAgICB2YWx1ZV9mbGFnICBBUyBcIlZBTFVFX0ZMQUdcIixcbiAgICAgICAgaXNfYWN0aXZlICAgQVMgXCJJU19BQ1RJVkVcIixcbiAgICAgICAgcGxhbl9pZCAgICAgQVMgXCJQTEFOX0lEXCJcbiAgICAgIEZST00gbmwyc3FsX3BsYW5zX2ZlYXR1cmVzXG4gICAgICBXSEVSRSBpc19hY3RpdmUgPSAnWSdcbiAgICAgIGAsXG4gICAgICBbXSxcbiAgICApO1xuXG4gICAgLyogLS0tLS0tLS0tLSBncm91cCAmIGF0dGFjaCAtLS0tLS0tLS0tICovXG4gICAgY29uc3QgYnlQbGFuOiBSZWNvcmQ8bnVtYmVyLCBhbnlbXT4gPSB7fTtcbiAgICBmZWF0dXJlcy5mb3JFYWNoKGYgPT4ge1xuICAgICAgaWYgKCFieVBsYW5bZi5QTEFOX0lEXSkgYnlQbGFuW2YuUExBTl9JRF0gPSBbXTtcbiAgICAgIGJ5UGxhbltmLlBMQU5fSURdLnB1c2goZik7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBwbGFucy5tYXAocCA9PiAoe1xuICAgICAgLi4ucCxcbiAgICAgIGZlYXR1cmVzOiBieVBsYW5bcC5JRF0gPz8gW10sXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3VsdCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHByaWNpbmcgcGxhbnM6JywgZXJyKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIHByaWNpbmcgcGxhbnMnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH0sXG4gICAgKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJxdWVyeSIsIk5leHRSZXNwb25zZSIsIkdFVCIsInBsYW5zIiwiZmVhdHVyZXMiLCJieVBsYW4iLCJmb3JFYWNoIiwiZiIsIlBMQU5fSUQiLCJwdXNoIiwicmVzdWx0IiwibWFwIiwicCIsIklEIiwianNvbiIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsInN0YXR1cyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/plans/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exec: () => (/* binding */ exec),\n/* harmony export */   execWithOrgConnection: () => (/* binding */ execWithOrgConnection),\n/* harmony export */   getOrgConnectionDetails: () => (/* binding */ getOrgConnectionDetails),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   queryWithOrgConnection: () => (/* binding */ queryWithOrgConnection)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dotenv/config */ \"(rsc)/./node_modules/dotenv/config.js\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dotenv_config__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n//lib/db.ts\n\n\n// Connection pool for the default database\nlet pool = null;\n// Track organization-specific pools\nconst orgPools = new Map();\n/**\n * Initialize the database connection pool\n */ async function initPool() {\n    if (!pool) {\n        console.log(process.env.DATABASE_URL);\n        pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n            connectionString: process.env.DATABASE_URL,\n            ssl: {\n                rejectUnauthorized: false\n            },\n            max: 10,\n            min: 2,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 10000\n        });\n        // Handle pool errors\n        pool.on('error', (err)=>{\n            console.error('Unexpected error on idle client', err);\n        });\n    }\n}\n/**\n * Execute a SELECT query against the database\n * @param sql SQL query to execute\n * @param params Query parameters\n * @returns Array of result rows\n */ async function query(sql, params = []) {\n    if (!pool) {\n        await initPool();\n    }\n    const client = await pool.connect();\n    try {\n        const result = await client.query(sql, params);\n        return result.rows;\n    } catch (err) {\n        console.error('Database error:', err);\n        throw err;\n    } finally{\n        client.release();\n    }\n}\n/**\n * Execute a DML query (INSERT, UPDATE, DELETE) against the database\n * @param sql SQL query to execute\n * @param params Query parameters\n * @returns Object with rowCount property indicating affected rows\n */ async function exec(sql, params = []) {\n    if (!pool) {\n        await initPool();\n    }\n    const client = await pool.connect();\n    try {\n        const result = await client.query(sql, params);\n        return {\n            rowCount: result.rowCount || 0\n        };\n    } catch (error) {\n        console.error(\"❌ Database exec error:\", error);\n        throw error;\n    } finally{\n        client.release();\n    }\n}\n/**\n * Create a database connection for an organization\n * @param orgId Organization ID\n * @param connectionInfo Connection details\n * @returns Pool object for the organization's database\n */ function createOrgPool(orgId, connectionInfo) {\n    // Check if pool exists\n    let orgPool = orgPools.get(orgId);\n    if (orgPool) {\n        return orgPool;\n    }\n    // Create new pool with better limits\n    orgPool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n        user: connectionInfo.user,\n        password: connectionInfo.password,\n        host: connectionInfo.host,\n        port: connectionInfo.port || 5432,\n        database: connectionInfo.database,\n        ssl: {\n            rejectUnauthorized: false\n        },\n        max: 5,\n        min: 0,\n        idleTimeoutMillis: 30000,\n        connectionTimeoutMillis: 10000\n    });\n    // Handle pool errors\n    orgPool.on('error', (err)=>{\n        console.error(`Unexpected error on idle client for org ${orgId}:`, err);\n        orgPools.delete(orgId); // Remove failed pool\n    });\n    // Store the pool\n    orgPools.set(orgId, orgPool);\n    return orgPool;\n}\n/**\n * Execute a SELECT query against an organization's database\n * @param orgId Organization ID\n * @param connectionInfo Connection details\n * @param sql SQL query to execute\n * @param params Query parameters\n * @returns Array of result rows\n */ async function queryWithOrgConnection(orgId, connectionInfo, sql, params = []) {\n    // Detect database type from connection info\n    const isOracle = connectionInfo && connectionInfo.connectString;\n    const isPostgres = connectionInfo && connectionInfo.host && (connectionInfo.port === '5432' || connectionInfo.port === 5432);\n    const isMySql = connectionInfo && connectionInfo.host && (connectionInfo.port === '3306' || connectionInfo.port === 3306);\n    const isMsSql = connectionInfo && connectionInfo.server;\n    // Log connection attempt\n    console.log(`Connecting to ${isOracle ? 'Oracle' : isPostgres ? 'PostgreSQL' : isMySql ? 'MySQL' : isMsSql ? 'MS SQL' : 'unknown'} database for org ${orgId}`);\n    // Handle Oracle connections\n    if (isOracle) {\n        return queryWithOracleConnection(orgId, connectionInfo, sql, params);\n    }\n    // Validate PostgreSQL connection info\n    if (!isOracle && (!connectionInfo || !connectionInfo.host)) {\n        console.error(`Invalid connection info for org ${orgId}:`, connectionInfo);\n        throw new Error(`Invalid database connection configuration for organization ${orgId}`);\n    }\n    console.log(`Connecting to database for org ${orgId} at ${connectionInfo.host}:${connectionInfo.port || 5432}`);\n    let client;\n    try {\n        const orgPool = createOrgPool(orgId, connectionInfo);\n        client = await orgPool.connect();\n        const result = await client.query(sql, params);\n        return result.rows;\n    } catch (err) {\n        console.error(`Database error for org ${orgId}:`, err.message);\n        // If we get a connection error, cleanup the pool\n        if (err.message.includes('too many clients')) {\n            await cleanupOrgPools();\n        }\n        throw err;\n    } finally{\n        if (client) {\n            client.release();\n        }\n    }\n}\n/**\n * Execute a SELECT query against an Oracle database\n * @param orgId Organization ID\n * @param connectionInfo Oracle connection details\n * @param sql SQL query to execute\n * @param params Query parameters\n * @returns Array of result rows\n */ async function queryWithOracleConnection(orgId, connectionInfo, sql, params = []) {\n    // Validate Oracle connection info\n    if (!connectionInfo || !connectionInfo.user || !connectionInfo.password || !connectionInfo.connectString) {\n        console.error(`Invalid Oracle connection info for org ${orgId}:`, connectionInfo);\n        throw new Error(`Invalid Oracle connection configuration for organization ${orgId}`);\n    }\n    const { user, password, connectString } = connectionInfo;\n    try {\n        // Format the connectString correctly if it doesn't have the proper format\n        let formattedConnectString = connectString;\n        if (!connectString.includes('/') && connectString.includes(':')) {\n            // Convert from host:port/service format to proper Oracle connection string\n            const [hostPort, service] = connectString.split('/');\n            const [host, port] = hostPort.split(':');\n            formattedConnectString = `(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=${host})(PORT=${port}))(CONNECT_DATA=(SERVICE_NAME=${service})))`;\n            console.log(`Reformatted Oracle connect string to: ${formattedConnectString}`);\n        }\n        // Dynamically import oracledb only when needed\n        const oracledb = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! oracledb */ \"oracledb\", 23));\n        // Configure Oracle driver\n        oracledb.default.outFormat = oracledb.default.OUT_FORMAT_OBJECT;\n        // Create connection to Oracle database\n        console.log(`Connecting to Oracle database for org ${orgId} with user ${user}`);\n        const connection = await oracledb.default.getConnection({\n            user,\n            password,\n            connectionString: formattedConnectString\n        });\n        try {\n            // Adapt SQL for Oracle\n            let modifiedSql = adaptSqlForOracle(sql, user);\n            let modifiedParams = params;\n            console.log(`Modified Oracle SQL: ${modifiedSql}`);\n            // Execute the query\n            const result = await connection.execute(modifiedSql, modifiedParams);\n            // Return the rows\n            return result.rows;\n        } catch (err) {\n            console.error(`Oracle query error for org ${orgId}:`, err.message);\n            throw err;\n        } finally{\n            // Close the connection\n            await connection.close();\n        }\n    } catch (err) {\n        console.error(`Oracle connection error for org ${orgId}:`, err.message);\n        // Provide more helpful error message\n        if (err.message.includes('TNS')) {\n            throw new Error(`Cannot connect to Oracle database with connect string '${connectString}'. Please check that the database server is running and the connect string is correct.`);\n        } else if (err.message.includes('ORA-01017')) {\n            throw new Error(`Oracle authentication failed. Please check your username and password.`);\n        } else if (err.message.includes('ORA-00942')) {\n            throw new Error(`Table or view does not exist. Please check that the table exists and is accessible by the ${user} user.`);\n        } else if (err.message.includes('ORA-00905')) {\n            throw new Error(`SQL syntax error: missing keyword. The query syntax may not be compatible with Oracle.`);\n        }\n        throw err;\n    }\n}\n/**\n * Execute a DML query against an organization's database\n * @param orgId Organization ID\n * @param connectionInfo Connection details\n * @param sql SQL query to execute\n * @param params Query parameters\n * @returns Object with rowCount property indicating affected rows\n */ async function execWithOrgConnection(orgId, connectionInfo, sql, params = []) {\n    // Detect database type from connection info\n    const isOracle = connectionInfo && connectionInfo.connectString;\n    // Handle Oracle connections\n    if (isOracle) {\n        return execWithOracleConnection(orgId, connectionInfo, sql, params);\n    }\n    // Handle PostgreSQL and other database types\n    const orgPool = createOrgPool(orgId, connectionInfo);\n    const client = await orgPool.connect();\n    try {\n        const result = await client.query(sql, params);\n        return {\n            rowCount: result.rowCount || 0\n        };\n    } catch (err) {\n        console.error(`Database error for org ${orgId}:`, err);\n        throw err;\n    } finally{\n        client.release();\n        await orgPool.end();\n    }\n}\n/**\n * Execute a DML query against an Oracle database\n * @param orgId Organization ID\n * @param connectionInfo Oracle connection details\n * @param sql SQL query to execute\n * @param params Query parameters\n * @returns Object with rowCount property indicating affected rows\n */ async function execWithOracleConnection(orgId, connectionInfo, sql, params = []) {\n    // Validate Oracle connection info\n    if (!connectionInfo || !connectionInfo.user || !connectionInfo.password || !connectionInfo.connectString) {\n        console.error(`Invalid Oracle connection info for org ${orgId}:`, connectionInfo);\n        throw new Error(`Invalid Oracle connection configuration for organization ${orgId}`);\n    }\n    const { user, password, connectString } = connectionInfo;\n    try {\n        // Format the connectString correctly if it doesn't have the proper format\n        let formattedConnectString = connectString;\n        if (!connectString.includes('/') && connectString.includes(':')) {\n            // Convert from host:port/service format to proper Oracle connection string\n            const [hostPort, service] = connectString.split('/');\n            const [host, port] = hostPort.split(':');\n            formattedConnectString = `(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=${host})(PORT=${port}))(CONNECT_DATA=(SERVICE_NAME=${service})))`;\n            console.log(`Reformatted Oracle connect string to: ${formattedConnectString}`);\n        }\n        // Dynamically import oracledb only when needed\n        const oracledb = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! oracledb */ \"oracledb\", 23));\n        // Configure Oracle driver\n        oracledb.default.outFormat = oracledb.default.OUT_FORMAT_OBJECT;\n        // Create connection to Oracle database\n        console.log(`Connecting to Oracle database for org ${orgId} with user ${user}`);\n        const connection = await oracledb.default.getConnection({\n            user,\n            password,\n            connectionString: formattedConnectString\n        });\n        try {\n            // Execute the query\n            const result = await connection.execute(sql, params, {\n                autoCommit: true\n            });\n            // Return the rowCount (Oracle calls this rowsAffected)\n            return {\n                rowCount: result.rowsAffected || 0\n            };\n        } catch (err) {\n            console.error(`Oracle query error for org ${orgId}:`, err.message);\n            throw err;\n        } finally{\n            // Close the connection\n            await connection.close();\n        }\n    } catch (err) {\n        console.error(`Oracle connection error for org ${orgId}:`, err.message);\n        throw err;\n    }\n}\n/**\n * Get connection details for an organization\n * @param orgId Organization ID\n * @returns Connection details or null if not found\n */ async function getOrgConnectionDetails(orgId) {\n    try {\n        const result = await query(`SELECT \"DATABASE_INFO\" FROM \"NL2SQL_ORG\" WHERE \"ORG_ID\" = $1`, [\n            orgId\n        ]);\n        if (result && result.length > 0 && result[0].DATABASE_INFO) {\n            return JSON.parse(result[0].DATABASE_INFO);\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting organization connection details:\", error);\n        return null;\n    }\n}\n/**\n * Adapt SQL query for Oracle database\n * @param sql SQL query to adapt\n * @param schemaName Schema name to prefix tables with\n * @returns Adapted SQL query\n */ function adaptSqlForOracle(sql, user) {\n    // Si no hay SQL, devolver cadena vacía\n    if (!sql) return '';\n    // Convertir SQL a mayúsculas para facilitar la coincidencia de patrones\n    let upperSql = sql.toUpperCase();\n    let modifiedSql = sql;\n    // Verificar si es una consulta de estilo PostgreSQL\n    const isPgStyle = upperSql.includes('\"') || upperSql.includes('$1') || upperSql.includes('LIMIT');\n    // Verificar si la consulta es para tablas del sistema\n    const isSystemTableQuery = upperSql.includes('ALL_TABLES') || upperSql.includes('USER_TABLES') || upperSql.includes('DUAL');\n    if (isPgStyle) {\n        console.log('Converting PostgreSQL-style query to Oracle syntax');\n        // Reemplazar comillas dobles con nada (Oracle no necesita comillas para identificadores regulares)\n        if (!isSystemTableQuery) {\n            modifiedSql = modifiedSql.replace(/\"/g, '');\n        }\n        // Reemplazar $1, $2, etc. con :1, :2, etc.\n        modifiedSql = modifiedSql.replace(/\\$([0-9]+)/g, ':$1');\n        // Reemplazar LIMIT con FETCH FIRST/NEXT\n        if (upperSql.includes('LIMIT')) {\n            const limitMatch = modifiedSql.match(/LIMIT\\s+(\\d+)/i);\n            if (limitMatch) {\n                const limitValue = limitMatch[1];\n                modifiedSql = modifiedSql.replace(/LIMIT\\s+\\d+/i, `FETCH FIRST ${limitValue} ROWS ONLY`);\n            }\n        }\n    }\n    // Si es una consulta para tablas del sistema, NO agregar prefijo de esquema\n    if (isSystemTableQuery && user && user.username) {\n        // Para tablas del sistema, eliminar cualquier prefijo de esquema que se haya agregado\n        const schemaPrefix = new RegExp(`${user.username}\\.`, 'gi');\n        modifiedSql = modifiedSql.replace(schemaPrefix, '');\n        return modifiedSql;\n    }\n    // Agregar prefijo de esquema para tablas de Oracle si aún no tienen uno\n    if (user && user.username) {\n        // Buscar nombres de tablas en cláusulas FROM y JOIN\n        modifiedSql = modifiedSql.replace(/(?:FROM|JOIN)\\s+([\"']?)(\\w+)([\"']?)/gi, (match, quote1, tableName, quote2)=>{\n            // Si el nombre de la tabla ya tiene un prefijo de esquema, dejarlo solo\n            if (tableName.includes('.')) {\n                return match;\n            }\n            // Omitir tablas del sistema\n            if ([\n                'ALL_TABLES',\n                'USER_TABLES',\n                'DUAL'\n            ].includes(tableName.toUpperCase())) {\n                return match;\n            }\n            // De lo contrario, agregar el prefijo de esquema con el nombre de usuario actual\n            return match.replace(`${quote1}${tableName}${quote2}`, `${quote1}${user.username}.${tableName}${quote2}`);\n        });\n    }\n    return modifiedSql;\n}\n// Add a cleanup function for org pools\nasync function cleanupOrgPools() {\n    const orgIds = Array.from(orgPools.keys());\n    for (const orgId of orgIds){\n        const pool = orgPools.get(orgId);\n        if (pool) {\n            try {\n                await pool.end();\n                orgPools.delete(orgId);\n            } catch (err) {\n                console.error(`Error cleaning up pool for org ${orgId}:`, err);\n            }\n        }\n    }\n}\n// Add process cleanup handlers\nprocess.on('SIGTERM', cleanupOrgPools);\nprocess.on('SIGINT', cleanupOrgPools);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fplans%2Froute&page=%2Fapi%2Fplans%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fplans%2Froute.ts&appDir=%2Fhome%2Fproject%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fproject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fplans%2Froute&page=%2Fapi%2Fplans%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fplans%2Froute.ts&appDir=%2Fhome%2Fproject%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fproject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_project_app_api_plans_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/plans/route.ts */ \"(rsc)/./app/api/plans/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_home_project_app_api_plans_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_home_project_app_api_plans_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/plans/route\",\n        pathname: \"/api/plans\",\n        filename: \"route\",\n        bundlePath: \"app/api/plans/route\"\n    },\n    resolvedPagePath: \"/home/project/app/api/plans/route.ts\",\n    nextConfigOutput,\n    userland: _home_project_app_api_plans_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZwbGFucyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcGxhbnMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZwbGFucyUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGcHJvamVjdCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGaG9tZSUyRnByb2plY3QmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ1o7QUFDakU7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7O0FBRTFGLHFDIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9ob21lL3Byb2plY3QvYXBwL2FwaS9wbGFucy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcGxhbnMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wbGFuc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcGxhbnMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvaG9tZS9wcm9qZWN0L2FwcC9hcGkvcGxhbnMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fplans%2Froute&page=%2Fapi%2Fplans%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fplans%2Froute.ts&appDir=%2Fhome%2Fproject%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fproject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "oracledb":
/*!***************************!*\
  !*** external "oracledb" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("oracledb");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry","vendor-chunks/dotenv"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fplans%2Froute&page=%2Fapi%2Fplans%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fplans%2Froute.ts&appDir=%2Fhome%2Fproject%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fproject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();