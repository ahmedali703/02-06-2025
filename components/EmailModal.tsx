//components/EmailModal.tsx
'use client';

import { useState } from 'react';
import { toast } from 'sonner';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { X, Mail, Plus, AlertCircle } from 'lucide-react';
import html2canvas from 'html2canvas';

interface EmailModalProps {
  isOpen: boolean;
  onClose: () => void;
  results: any[];
  question: string;
  selectedModel: string;
  chartElementId?: string;
}

const EmailModal: React.FC<EmailModalProps> = ({
  isOpen,
  onClose,
  results,
  question,
  selectedModel,
  chartElementId = 'chart-container',
}) => {
  const [toEmails, setToEmails] = useState<string[]>([]);
  const [ccEmails, setCcEmails] = useState<string[]>([]);
  const [newToEmail, setNewToEmail] = useState('');
  const [newCcEmail, setNewCcEmail] = useState('');
  const [sending, setSending] = useState(false);

  const validateEmail = (email: string): boolean => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  const addToEmail = () => {
    if (newToEmail.trim() && validateEmail(newToEmail)) {
      setToEmails([...toEmails, newToEmail.trim()]);
      setNewToEmail('');
    } else if (newToEmail.trim()) {
      toast.error('Please enter a valid email address');
    }
  };

  const addCcEmail = () => {
    if (newCcEmail.trim() && validateEmail(newCcEmail)) {
      setCcEmails([...ccEmails, newCcEmail.trim()]);
      setNewCcEmail('');
    } else if (newCcEmail.trim()) {
      toast.error('Please enter a valid email address');
    }
  };

  const removeToEmail = (index: number) => {
    setToEmails(toEmails.filter((_, i) => i !== index));
  };

  const removeCcEmail = (index: number) => {
    setCcEmails(ccEmails.filter((_, i) => i !== index));
  };

  const generateHTMLReport = async (): Promise<string> => {
    if (results.length === 0) return '';

    let chartImage = '';
    if (chartElementId) {
      const chartElement = document.getElementById(chartElementId);
      if (chartElement) {
        await new Promise((resolve) => setTimeout(resolve, 1000));
        const canvas = await html2canvas(chartElement);
        chartImage = canvas.toDataURL('image/png');
      }
    }

    const headers = Object.keys(results[0]);
    let htmlString = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
         <meta charset="UTF-8">
         <meta name="viewport" content="width=device-width, initial-scale=1.0">
         <title>Results Report</title>
         <style>
           body { font-family: Arial, sans-serif; padding: 20px; background-color: #f9f9f9; }
           .container { max-width: 1000px; margin: 0 auto; background: white; padding: 20px; box-shadow: 0px 0px 10px rgba(0,0,0,0.1); border-radius: 12px; }
           h1 { text-align: center; color: #4f46e5; }
           p { text-align: center; color: #6b7280; }
           table { width: 100%; border-collapse: collapse; margin-top: 20px; }
           th, td { border: 1px solid #e5e7eb; padding: 8px; text-align: left; font-size: 12px; }
           th { background-color: #4f46e5; color: white; }
           tr:nth-child(even) { background-color: #f3f4f6; }
           .chart-container { margin-top: 20px; text-align: center; }
           .chart-container img { max-width: 100%; height: auto; }
           .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #9ca3af; }
           .logo { text-align: center; margin-bottom: 20px; }
           .logo span { font-size: 24px; font-weight: bold; }
           .logo .colored { color: #4f46e5; }
         </style>
      </head>
      <body>
         <div class="container">
           <div class="logo">
             <span class="colored">AI</span><span>Query</span>
           </div>
           <h1>Results Report</h1>
           <p>Generated on: ${new Date().toLocaleString()}</p>
           <p>Query: "${question}"</p>
           <table>
             <thead>
               <tr>`;
    headers.forEach((header) => {
      htmlString += `<th>${header}</th>`;
    });
    htmlString += `</tr>
             </thead>
             <tbody>`;
    results.forEach((row) => {
      htmlString += `<tr>`;
      headers.forEach((header) => {
        htmlString += `<td>${row[header]}</td>`;
      });
      htmlString += `</tr>`;
    });
    htmlString += `
             </tbody>
           </table>`;

    if (chartImage) {
      htmlString += `
           <div class="chart-container">
             <h2>Visualization</h2>
             <img src="${chartImage}" alt="Data Visualization" />
           </div>`;
    }

    htmlString += `
           <div class="footer">
             <p>Generated by MyQuery - Transform natural language into powerful SQL queries</p>
           </div>
         </div>
      </body>
      </html>
    `;
    return htmlString;
  };

  const generateEmailContent = async (): Promise<string> => {
    try {
      // Create the request body with the question and model
      const response = await fetch('/api/generate-email-description', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          question,
          model: selectedModel || 'gpt-4o-mini' // Provide a default model if none is specified
        }),
      });
      
      if (!response.ok) {
        console.error('Email generation API error:', await response.text());
        throw new Error('Failed to generate email content');
      }
      
      const data = await response.json();
      return (
        data.emailDescription ||
        'Please find attached the detailed results report.'
      );
    } catch (e) {
      console.error('Error generating email content:', e);
      throw new Error('Failed to generate email content');
    }
  };

  const handleSendEmail = async () => {
    if (toEmails.length === 0) {
      toast.error('Please add at least one recipient');
      return;
    }

    setSending(true);
    try {
      const emailContent = await generateEmailContent();
      const finalEmailContent =
        emailContent ||
        'Dear Valued Customer,\n\nPlease find attached the detailed report of your search results.\n\nBest regards,\nMyQuery Team';
      const htmlReport = await generateHTMLReport();
      // Create a subject line based on the selected model
      const subjectLine = selectedModel === 'table-view'
        ? `Table Data Report: ${question.replace('Data from table: ', '')}`
        : 'Your Requested MyQuery Report';
        
      const res = await fetch('/api/send-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          to: toEmails,
          cc: ccEmails,
          subject: subjectLine,
          body: finalEmailContent,
          htmlAttachment: htmlReport,
        }),
      });
      if (!res.ok) throw new Error('Email sending failed');
      toast.success('Email sent successfully!');
      onClose();
      setToEmails([]);
      setCcEmails([]);
    } catch (error) {
      toast.error('Failed to send email');
    }
    setSending(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md bg-gray-200/90 backdrop-blur-lg border border-gray-300 rounded-lg shadow-lg">
        <DialogHeader className="border-b border-gray-300 pb-4">
          <DialogTitle className="text-xl font-bold flex items-center gap-2">
            <Mail className="h-5 w-5 text-purple-500" />
            <span>Email Results</span>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-6 py-4">
          {/* Recipients (To) */}
          <div className="space-y-2">
            <Label className="block text-sm font-medium text-gray-700">To</Label>
            <div className="flex gap-2">
              <Input
                type="email"
                placeholder="Enter email address"
                value={newToEmail}
                onChange={(e) => setNewToEmail(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && addToEmail()}
                className="w-full px-4 py-2 border border-gray-400 bg-gray-100 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              />
              <button
                type="button"
                onClick={addToEmail}
                className="bg-gray-300 hover:bg-gray-400 text-gray-700 w-10 h-10 rounded-lg flex items-center justify-center transition-colors"
              >
                <Plus className="h-5 w-5" />
              </button>
            </div>
            <div className="flex flex-wrap gap-2 mt-2">
              {toEmails.map((email, index) => (
                <div
                  key={index}
                  className="flex items-center gap-1 px-3 py-1 rounded-full bg-indigo-100 border border-indigo-200"
                >
                  <span className="text-sm text-indigo-700">
                    {email}
                  </span>
                  <button
                    onClick={() => removeToEmail(index)}
                    className="text-indigo-500 hover:text-indigo-800 ml-1"
                  >
                    <X className="h-4 w-4" />
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* CC Recipients */}
          <div className="space-y-2">
            <Label className="block text-sm font-medium text-gray-700">Cc</Label>
            <div className="flex gap-2">
              <Input
                type="email"
                placeholder="Enter email address"
                value={newCcEmail}
                onChange={(e) => setNewCcEmail(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && addCcEmail()}
                className="w-full px-4 py-2 border border-gray-400 bg-gray-100 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              />
              <button
                type="button"
                onClick={addCcEmail}
                className="bg-gray-300 hover:bg-gray-400 text-gray-700 w-10 h-10 rounded-lg flex items-center justify-center transition-colors"
              >
                <Plus className="h-5 w-5" />
              </button>
            </div>
            <div className="flex flex-wrap gap-2 mt-2">
              {ccEmails.map((email, index) => (
                <div
                  key={index}
                  className="flex items-center gap-1 px-3 py-1 rounded-full bg-blue-100 border border-blue-200"
                >
                  <span className="text-sm text-blue-700">
                    {email}
                  </span>
                  <button
                    onClick={() => removeCcEmail(index)}
                    className="text-blue-500 hover:text-blue-800 ml-1"
                  >
                    <X className="h-4 w-4" />
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Info Message */}
          <div className="flex items-start gap-3 p-4 rounded-lg bg-white border border-gray-300">
            <AlertCircle className="h-5 w-5 text-indigo-600 mt-0.5 flex-shrink-0" />
            <div className="text-sm text-gray-600">
              <p>The email will include:</p>
              <ul className="list-disc list-inside mt-2 space-y-1">
                <li>Query results in a formatted table</li>
                <li>Generated visualizations (if available)</li>
                <li>Analysis and insights based on your query</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="flex justify-end gap-3 pt-4 border-t border-gray-300">
          <button
            onClick={onClose}
            className="px-4 py-2 border border-gray-400 text-gray-700 font-medium rounded-lg hover:bg-gray-300 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={handleSendEmail}
            disabled={sending}
            className="px-4 py-2 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 transition-colors disabled:opacity-70"
          >
            {sending ? (
              <span className="animate-pulse">Sending...</span>
            ) : (
              'Send Report'
            )}
          </button>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default EmailModal;